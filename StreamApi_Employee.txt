public class Employee {

	String name;
	int salary;
	int age;

	Employee() {
	}

	public Employee(String name, int salary, int age) {
		super();
		this.name = name;
		this.salary = salary;
		this.age = age;
	}

	@Override
	public String toString() {
		return "Employee [name=" + name + ", salary=" + salary + ", age=" + age + "]";
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public static void main(String[] agrs) {
		List<Employee> emplist = new ArrayList<Employee>();
		
		Employee e1 = new Employee("monika", 5000, 30);
		Employee e2 = new Employee("asmita", 100, 25);
		Employee e3 = new Employee("ashu", 6065, 24);
		Employee e4 = new Employee("rtt", 7045, 28);

		emplist.add(e1);
		emplist.add(e3);
		emplist.add(e4);
		emplist.add(e2);

		List<Employee> asc_sorted = emplist.stream()
				                   .sorted((a, b) -> a.getName().compareTo(b.getName()))
				                   .collect(Collectors.toList());
		System.out.println(asc_sorted);

		List<Employee> desc_list = emplist.stream()
				                   .sorted((a, b) -> b.getName().compareTo(a.getName()))
				                   .collect(Collectors.toList());
		System.out.println(desc_list);

		List<Employee> sal_asc = emplist.stream()
				                .sorted((a, b) -> a.getSalary() - b.getSalary())
				                .collect(Collectors.toList());
		System.out.println(sal_asc);

		List<Employee> sal_desc = emplist.stream()
				                 .sorted((a, b) -> b.getSalary() - a.getSalary())
				                 .collect(Collectors.toList());
		System.out.println(sal_desc);

		Optional<Employee> secondLargestNumber = emplist.stream()
				                  .sorted(Comparator.comparingDouble(Employee::getSalary)
				                  .reversed()).skip(0).findFirst();

		System.out.println(secondLargestNumber);

		System.out.println("Before: " + emplist);

		emplist.stream().forEach(employee -> employee.setSalary(Math.round(employee.getSalary() * 1.5F)));
		System.out.println("After: " + emplist);

		List<Employee> newEmployees = emplist.stream()
				                      .filter(emp -> emp.getAge() >= 27)
				                      .map(emp -> {emp.setSalary(emp.getSalary() * 3 / 2);
			                           return emp;
		                               }).collect(Collectors.toList());	


               List<Employee> empDept = empList.stream()
                                               .filter(e -> e.getDepartment() == "HR")
                                               .collect(Collectors.toList());Â 
               System.out.println(empDept);	

	